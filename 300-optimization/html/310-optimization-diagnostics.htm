<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="author" content="Joachim Vandekerckhove">
  <title>Optimization diagnostics</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
<style>
  html, .view body { background-color: black; counter-reset: slideidx; }
  body, .view section { background-color: white; border-radius: 12px }
  /* A section is a slide. It's size is 800x600, and this will never change */
  section, .view head > title {
      font-family: 'DejaVu Sans Condensed', 'Liberation Sans', 'Nimbus Sans L', arial, serif;
      font-size: 30px;
  }

  .view section:after {
    counter-increment: slideidx;
    content: counter(slideidx, decimal-leading-zero);
    position: absolute; bottom: -80px; right: 100px;
    color: white;
  }

  .view head > title {
    color: white;
    text-align: center;
    margin: 1em 0 1em 0;
  }

  h1, h2 {
    margin-top: 200px;
    text-align: center;
    font-size: 80px;
  }
  h3 {
    margin: 100px 0 50px 100px;
  }

  ul {
      margin: 50px 200px;
  }
  li > ul {
      margin: 15px 50px;
  }

  p {
    margin: 75px;
    font-size: 50px;
  }

  blockquote {
    height: 100%;
    background-color: black;
    color: white;
    font-size: 60px;
    padding: 50px;
  }
  blockquote:before {
    content: open-quote;
  }
  blockquote:after {
    content: close-quote;
  }

  /* Figures are displayed full-page, with the caption
     on top of the image/video */
  figure {
    background-color: black;
    width: 100%;
    height: 100%;
  }
  figure > * {
    position: absolute;
  }
  figure > img, figure > video {
    width: 100%; height: 100%;
  }
  figcaption {
    margin: 70px;
    font-size: 50px;
  }

  footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 40px;
    text-align: right;
    background-color: #F3F4F8;
    border-top: 1px solid #CCC;
  }

  /* Transition effect */
  /* Feel free to change the transition effect for original
     animations. See here:
     https://developer.mozilla.org/en/CSS/CSS_transitions
     How to use CSS3 Transitions: */
  section {
    -moz-transition: left 400ms linear 0s;
    -webkit-transition: left 400ms linear 0s;
    -ms-transition: left 400ms linear 0s;
    transition: left 400ms linear 0s;
  }
  .view section {
    -moz-transition: none;
    -webkit-transition: none;
    -ms-transition: none;
    transition: none;
  }

  .view section[aria-selected] {
    border: 5px red solid;
  }

  /* Before */
  section { left: -150%; }
  /* Now */
  section[aria-selected] { left: 0; }
  /* After */
  section[aria-selected] ~ section { left: +150%; }

  /* Incremental elements */

  /* By default, visible */
  .incremental > * { opacity: 1; }

  /* The current item */
  .incremental > *[aria-selected] { opacity: 1; }

  /* The items to-be-selected */
  .incremental > *[aria-selected] ~ * { opacity: 0; }

  /* The progressbar, at the bottom of the slides, show the global
     progress of the presentation. */
  #progress-bar {
    height: 2px;
    background: #AAA;
  }
</style>
  <style>
  h1 {
    font-size: 50px;
  }
  p {
    font-size: 25px;
    margin: 15px 50px;
  }
  ul, ol {
    font-size: 25px;
    margin: 15px 75px;
  }
  code {
    color: #8728F1;
  }
  pre code {
    font-size: 20px;
    margin: 15px 50px;
    display: block;
    background-color: #eef;
  }
  </style>
</head>
<body>
<section class="title">
  <h1 class="title">Optimization diagnostics</h1>
  <footer>
    <span class="author">Joachim Vandekerckhove</span> · 
  </footer>
</section>
<section id="analytical-methods" class="title-slide slide level2"><h2>Analytical methods</h2></section><section id="the-jacobian" class="slide level3">
<h3>The Jacobian</h3>
<p>The Jacobian matrix is the matrix of all first-order partial derivatives. It tells us whether a function at a particular point is increasing, decreasing, or flat.</p>
</section><section id="section" class="slide level3">
<h3></h3>
<p><img src="http://www.emathhelp.net/images/calc/135_first_derivative_test.png" style="zoom:75%;" /></p>
</section><section id="the-hessian" class="slide level3">
<h3>The Hessian</h3>
<p>The Hessian matrix or Hessian is the matrix of all <em>second-order</em> partial derivatives. It describes the local curvature of a function of many variables.</p>
<p>If the Hessian is positive-definite at <span class="math inline"><em>x</em></span>, then the function has an isolated local minimum at <span class="math inline"><em>x</em></span>.</p>
<p>In practice, it’s important to distinguish between <em>numerical</em> deviations from optimality and <em>practical</em> ones.</p>
</section><section id="section-1" class="slide level3">
<h3></h3>
<p><img src="https://files.askiitians.com/cdn1/images/201754-1342399-5163-4-the-second-derivative.jpg" /></p>
<p>(“Concave upward” is also called “convex.” Concave makes a little cave!)</p>
</section>
<section id="visualization" class="title-slide slide level2"><h2>Visualization</h2></section><section id="section-2" class="slide level3">
<h3></h3>
<p>Plot the model prediction over the data</p>
<p><img src="/home/joachim/Dropbox/GitHub/cogs-205b/300-optimization/powerlaw.jpg" style="zoom:67%;" /></p>
</section><section id="section-3" class="slide level3">
<h3></h3>
<p>Plot the loss function around the obtained minimum</p>
<p><img src="/home/joachim/Dropbox/GitHub/cogs-205b/300-optimization/marginals.jpg" style="zoom:67%;" /></p>
</section>
<section id="sensitivity-testing" class="title-slide slide level2"><h2>Sensitivity testing</h2></section><section id="the-jackknife" class="slide level3">
<h3>The jackknife</h3>
<p>An important consideration in model fitting and parameter estimation is how sensitive the outcome is to things that shouldn’t matter. The opposite of sensitivity is <em>robustness</em>, and we are often interested in testing the robustness of results (not just in estimation, but in <a href="https://www.pnas.org/content/115/11/2607">experiments</a> as well!).</p>
<p>One thing to be robust against is: what would our conclusion have been if we had lost <em>one data point</em>? With <span class="math inline"><em>N</em></span> data points, we can construct <span class="math inline"><em>N</em></span> synthetic data sets of size <span class="math inline"><em>N</em> − 1</span> that have similar properties to our real data set. This collection of data sets will give rise to a distribution of parameter estimates, with some variation we can explore. This procedure is called <a href="https://en.wikipedia.org/wiki/Jackknife_resampling">jackknife resampling</a>.</p>
</section><section id="the-bootstrap" class="slide level3">
<h3>The bootstrap</h3>
<p>Very similar to the jackknife, we can ask: what would the conclusion have been if we had observed a <em>random replacement sample</em> of our actually obtained sample?</p>
<p>This procedure is much more flexible than the jackknife, because it allows for infinitely many synthetic samples of any size. Because you use one data set to imagine many more data sets, these two procedures are both called <a href="https://en.wikipedia.org/wiki/Bootstrapping_(statistics)">bootstrapping</a>.</p>
</section><section id="vandekerckhoves-demon" class="slide level3">
<h3>Vandekerckhove’s demon</h3>
<p>In many models, we have a well defined “error model.” A very common example is <span class="math inline"><em>y</em><sub><em>i</em></sub> = <em>f</em>(<em>x</em><sub><em>i</em></sub>) + <em>ϵ</em><sub><em>i</em></sub></span>. It is typically assumed that the <span class="math inline"><em>ϵ</em><sub><em>i</em></sub></span> are distributed <span class="math inline"><em>N</em>(0, <em>σ</em><sup>2</sup>)</span>, i.i.d..</p>
<p>We can ask yet another question: what if the <em>measurement error we observed at time <span class="math inline"><em>i</em></span> was a different sample from this distribution of measurement errors</em> we are assuming? A sensitivity test could involve resampling <span class="math inline"><em>ϵ</em><sub><em>i</em></sub></span> from <span class="math inline"><em>N</em>(0, <em>σ</em><sup>2</sup>)</span> and refitting.</p>
<p>(This is obviously something I made up recently. It has the advantage that it is more easily applicable to our power law project.)</p>
</section><section id="model-ablation" class="slide level3">
<h3>Model ablation</h3>
<p><em><strong>ablation, n.</strong></em></p>
<p><em>the process of ablating: such as:</em></p>
<ol type="1">
<li><em>surgical removal</em></li>
<li><em>loss of a part (such as ice from a glacier or the outside of a nose cone) by melting or vaporization</em></li>
</ol>
<p>Sometimes we are able to separate a model into assumptions that are <a href="https://en.wikipedia.org/wiki/Duhem%E2%80%93Quine_thesis">core to our theory and others that are ancillary</a> and only needed to get fitting done. We could swap out the unimportant assumptions and see if our model still works!</p>
</section>
<section id="regularization" class="title-slide slide level2"><h2>Regularization</h2></section><section id="general-case" class="slide level3">
<h3>General case</h3>
<p>Loss += <span class="math inline"><em>λ</em><em>R</em>(<em>θ</em>)</span></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Lasso_(statistics)">LASSO</a>: <span class="math inline"><em>R</em>(<em>θ</em>) = <em>s</em><em>u</em><em>m</em>(|<em>θ</em>|)</span></li>
<li><a href="https://en.wikipedia.org/wiki/Ridge_regression">Ridge regression</a>: <span class="math inline"><em>R</em>(<em>θ</em>) = <em>s</em><em>u</em><em>m</em>(<em>θ</em><sup>2</sup>)</span></li>
<li>Smoothing of discontinuities</li>
<li><a href="https://en.wikipedia.org/wiki/Feature_selection">Feature selection</a></li>
</ul>
</section><section id="link-functions-and-mapping" class="slide level3">
<h3>Link functions and mapping</h3>
<p>Often it is helpful to force parameters to fit inside some domain or to be allowed to take all real values.</p>
<ul>
<li>log transform to go from <span class="math inline"><em>R</em><sup>+</sup></span> to <span class="math inline"><em>R</em></span></li>
<li>exp to go back</li>
<li>normcdf to go from <span class="math inline"><em>R</em></span> to <span class="math inline">[0, 1]</span></li>
<li>norminv to go back</li>
</ul>
</section><section id="section-4" class="slide level3">
<h3></h3>
<p><img src="/home/joachim/Dropbox/GitHub/cogs-205b/300-optimization/link-functions.jpeg" style="zoom:33%;" /></p>
<p>(From <a href="https://dx.doi.org/10.1177/0272989X12458724">Dias et al., 2012</a>. Note <em>probit</em> = normcdf.)</p>
</section>
<!-- {{{{ dzslides core
#
#
#     __  __  __       .  __   ___  __
#    |  \  / /__` |    | |  \ |__  /__`
#    |__/ /_ .__/ |___ | |__/ |___ .__/ core :€
#
#
# The following block of code is not supposed to be edited.
# But if you want to change the behavior of these slides,
# feel free to hack it!
#
-->

<div id="progress-bar"></div>

<!-- Default Style -->
<style>
  * { margin: 0; padding: 0; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }
  [role="note"] { display: none; }
  body {
    width: 800px; height: 600px;
    margin-left: -400px; margin-top: -300px;
    position: absolute; top: 50%; left: 50%;
    overflow: hidden;
    display: none;
  }
  .view body {
    position: static;
    margin: 0; padding: 0;
    width: 100%; height: 100%;
    display: inline-block;
    overflow: visible; overflow-x: hidden;
    /* undo Dz.onresize */
    transform: none !important;
    -moz-transform: none !important;
    -webkit-transform: none !important;
    -o-transform: none !important;
    -ms-transform: none !important;
  }
  .view head, .view head > title { display: block }
  section {
    position: absolute;
    pointer-events: none;
    width: 100%; height: 100%;
  }
  .view section {
    pointer-events: auto;
    position: static;
    width: 800px; height: 600px;
    margin: -150px -200px;
    float: left;

    transform: scale(.4);
    -moz-transform: scale(.4);
    -webkit-transform: scale(.4);
    -o-transform: scale(.4);
    -ms-transform: scale(.4);
  }
  .view section > * { pointer-events: none; }
  section[aria-selected] { pointer-events: auto; }
  html { overflow: hidden; }
  html.view { overflow: visible; }
  body.loaded { display: block; }
  .incremental {visibility: hidden; }
  .incremental[active] {visibility: visible; }
  #progress-bar{
    bottom: 0;
    position: absolute;
    -moz-transition: width 400ms linear 0s;
    -webkit-transition: width 400ms linear 0s;
    -ms-transition: width 400ms linear 0s;
    transition: width 400ms linear 0s;
  }
  .view #progress-bar {
    display: none;
  }
</style>

<script>
  var Dz = {
    remoteWindows: [],
    idx: -1,
    step: 0,
    html: null,
    slides: null,
    progressBar : null,
    params: {
      autoplay: "1"
    }
  };

  Dz.init = function() {
    document.body.className = "loaded";
    this.slides = Array.prototype.slice.call($$("body > section"));
    this.progressBar = $("#progress-bar");
    this.html = document.body.parentNode;
    this.setupParams();
    this.onhashchange();
    this.setupTouchEvents();
    this.onresize();
    this.setupView();
  }

  Dz.setupParams = function() {
    var p = window.location.search.substr(1).split('&');
    p.forEach(function(e, i, a) {
      var keyVal = e.split('=');
      Dz.params[keyVal[0]] = decodeURIComponent(keyVal[1]);
    });
  // Specific params handling
    if (!+this.params.autoplay)
      $$.forEach($$("video"), function(v){ v.controls = true });
  }

  Dz.onkeydown = function(aEvent) {
    // Don't intercept keyboard shortcuts
    if (aEvent.altKey
      || aEvent.ctrlKey
      || aEvent.metaKey
      || aEvent.shiftKey) {
      return;
    }
    if ( aEvent.keyCode == 37 // left arrow
      || aEvent.keyCode == 38 // up arrow
      || aEvent.keyCode == 33 // page up
    ) {
      aEvent.preventDefault();
      this.back();
    }
    if ( aEvent.keyCode == 39 // right arrow
      || aEvent.keyCode == 40 // down arrow
      || aEvent.keyCode == 34 // page down
    ) {
      aEvent.preventDefault();
      this.forward();
    }
    if (aEvent.keyCode == 35) { // end
      aEvent.preventDefault();
      this.goEnd();
    }
    if (aEvent.keyCode == 36) { // home
      aEvent.preventDefault();
      this.goStart();
    }
    if (aEvent.keyCode == 32) { // space
      aEvent.preventDefault();
      this.toggleContent();
    }
    if (aEvent.keyCode == 70) { // f
      aEvent.preventDefault();
      this.goFullscreen();
    }
    if (aEvent.keyCode == 79) { // o
      aEvent.preventDefault();
      this.toggleView();
    }
  }

  /* Touch Events */

  Dz.setupTouchEvents = function() {
    var orgX, newX;
    var tracking = false;

    var db = document.body;
    db.addEventListener("touchstart", start.bind(this), false);
    db.addEventListener("touchmove", move.bind(this), false);

    function start(aEvent) {
      aEvent.preventDefault();
      tracking = true;
      orgX = aEvent.changedTouches[0].pageX;
    }

    function move(aEvent) {
      if (!tracking) return;
      newX = aEvent.changedTouches[0].pageX;
      if (orgX - newX > 100) {
        tracking = false;
        this.forward();
      } else {
        if (orgX - newX < -100) {
          tracking = false;
          this.back();
        }
      }
    }
  }

  Dz.setupView = function() {
    document.body.addEventListener("click", function ( e ) {
      if (!Dz.html.classList.contains("view")) return;
      if (!e.target || e.target.nodeName != "SECTION") return;

      Dz.html.classList.remove("view");
      Dz.setCursor(Dz.slides.indexOf(e.target) + 1);
    }, false);
  }

  /* Adapt the size of the slides to the window */

  Dz.onresize = function() {
    var db = document.body;
    var sx = db.clientWidth / window.innerWidth;
    var sy = db.clientHeight / window.innerHeight;
    var transform = "scale(" + (1/Math.max(sx, sy)) + ")";

    db.style.MozTransform = transform;
    db.style.WebkitTransform = transform;
    db.style.OTransform = transform;
    db.style.msTransform = transform;
    db.style.transform = transform;
  }


  Dz.getNotes = function(aIdx) {
    var s = $("section:nth-of-type(" + aIdx + ")");
    var d = s.$("[role='note']");
    return d ? d.innerHTML : "";
  }

  Dz.onmessage = function(aEvent) {
    var argv = aEvent.data.split(" "), argc = argv.length;
    argv.forEach(function(e, i, a) { a[i] = decodeURIComponent(e) });
    var win = aEvent.source;
    if (argv[0] === "REGISTER" && argc === 1) {
      this.remoteWindows.push(win);
      this.postMsg(win, "REGISTERED", document.title, this.slides.length);
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
      return;
    }
    if (argv[0] === "BACK" && argc === 1)
      this.back();
    if (argv[0] === "FORWARD" && argc === 1)
      this.forward();
    if (argv[0] === "START" && argc === 1)
      this.goStart();
    if (argv[0] === "END" && argc === 1)
      this.goEnd();
    if (argv[0] === "TOGGLE_CONTENT" && argc === 1)
      this.toggleContent();
    if (argv[0] === "SET_CURSOR" && argc === 2)
      window.location.hash = "#" + argv[1];
    if (argv[0] === "GET_CURSOR" && argc === 1)
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
    if (argv[0] === "GET_NOTES" && argc === 1)
      this.postMsg(win, "NOTES", this.getNotes(this.idx));
  }

  Dz.toggleContent = function() {
    // If a Video is present in this new slide, play it.
    // If a Video is present in the previous slide, stop it.
    var s = $("section[aria-selected]");
    if (s) {
      var video = s.$("video");
      if (video) {
        if (video.ended || video.paused) {
          video.play();
        } else {
          video.pause();
        }
      }
    }
  }

  Dz.setCursor = function(aIdx, aStep) {
    // If the user change the slide number in the URL bar, jump
    // to this slide.
    aStep = (aStep != 0 && typeof aStep !== "undefined") ? "." + aStep : ".0";
    window.location.hash = "#" + aIdx + aStep;
  }

  Dz.onhashchange = function() {
    var cursor = window.location.hash.split("#"),
        newidx = 1,
        newstep = 0;
    if (cursor.length == 2) {
      newidx = ~~cursor[1].split(".")[0];
      newstep = ~~cursor[1].split(".")[1];
      if (newstep > Dz.slides[newidx - 1].$$('.incremental > *').length) {
        newstep = 0;
        newidx++;
      }
    }
    this.setProgress(newidx, newstep);
    if (newidx != this.idx) {
      this.setSlide(newidx);
    }
    if (newstep != this.step) {
      this.setIncremental(newstep);
    }
    for (var i = 0; i < this.remoteWindows.length; i++) {
      this.postMsg(this.remoteWindows[i], "CURSOR", this.idx + "." + this.step);
    }
  }

  Dz.back = function() {
    if (this.idx == 1 && this.step == 0) {
      return;
    }
    if (this.step == 0) {
      this.setCursor(this.idx - 1,
                     this.slides[this.idx - 2].$$('.incremental > *').length);
    } else {
      this.setCursor(this.idx, this.step - 1);
    }
  }

  Dz.forward = function() {
    if (this.idx >= this.slides.length &&
        this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
        return;
    }
    if (this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
      this.setCursor(this.idx + 1, 0);
    } else {
      this.setCursor(this.idx, this.step + 1);
    }
  }

  Dz.goStart = function() {
    this.setCursor(1, 0);
  }

  Dz.goEnd = function() {
    var lastIdx = this.slides.length;
    var lastStep = this.slides[lastIdx - 1].$$('.incremental > *').length;
    this.setCursor(lastIdx, lastStep);
  }

  Dz.toggleView = function() {
    this.html.classList.toggle("view");

    if (this.html.classList.contains("view")) {
      $("section[aria-selected]").scrollIntoView(true);
    }
  }

  Dz.setSlide = function(aIdx) {
    this.idx = aIdx;
    var old = $("section[aria-selected]");
    var next = $("section:nth-of-type("+ this.idx +")");
    if (old) {
      old.removeAttribute("aria-selected");
      var video = old.$("video");
      if (video) {
        video.pause();
      }
    }
    if (next) {
      next.setAttribute("aria-selected", "true");
      if (this.html.classList.contains("view")) {
        next.scrollIntoView();
      }
      var video = next.$("video");
      if (video && !!+this.params.autoplay) {
        video.play();
      }
    } else {
      // That should not happen
      this.idx = -1;
      // console.warn("Slide doesn't exist.");
    }
  }

  Dz.setIncremental = function(aStep) {
    this.step = aStep;
    var old = this.slides[this.idx - 1].$('.incremental > *[aria-selected]');
    if (old) {
      old.removeAttribute('aria-selected');
    }
    var incrementals = $$('.incremental');
    if (this.step <= 0) {
      $$.forEach(incrementals, function(aNode) {
        aNode.removeAttribute('active');
      });
      return;
    }
    var next = this.slides[this.idx - 1].$$('.incremental > *')[this.step - 1];
    if (next) {
      next.setAttribute('aria-selected', true);
      next.parentNode.setAttribute('active', true);
      var found = false;
      $$.forEach(incrementals, function(aNode) {
        if (aNode != next.parentNode)
          if (found)
            aNode.removeAttribute('active');
          else
            aNode.setAttribute('active', true);
        else
          found = true;
      });
    } else {
      setCursor(this.idx, 0);
    }
    return next;
  }

  Dz.goFullscreen = function() {
    var html = $('html'),
        requestFullscreen = html.requestFullscreen || html.requestFullScreen || html.mozRequestFullScreen || html.webkitRequestFullScreen;
    if (requestFullscreen) {
      requestFullscreen.apply(html);
    }
  }
  
  Dz.setProgress = function(aIdx, aStep) {
    var slide = $("section:nth-of-type("+ aIdx +")");
    if (!slide)
      return;
    var steps = slide.$$('.incremental > *').length + 1,
        slideSize = 100 / (this.slides.length - 1),
        stepSize = slideSize / steps;
    this.progressBar.style.width = ((aIdx - 1) * slideSize + aStep * stepSize) + '%';
  }
  
  Dz.postMsg = function(aWin, aMsg) { // [arg0, [arg1...]]
    aMsg = [aMsg];
    for (var i = 2; i < arguments.length; i++)
      aMsg.push(encodeURIComponent(arguments[i]));
    aWin.postMessage(aMsg.join(" "), "*");
  }
  
  function init() {
    Dz.init();
    window.onkeydown = Dz.onkeydown.bind(Dz);
    window.onresize = Dz.onresize.bind(Dz);
    window.onhashchange = Dz.onhashchange.bind(Dz);
    window.onmessage = Dz.onmessage.bind(Dz);
  }

  window.onload = init;
</script>


<script> // Helpers
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {

      // closest thing possible to the ECMAScript 5 internal IsCallable
      // function 
      if (typeof this !== "function")
      throw new TypeError(
        "Function.prototype.bind - what is trying to be fBound is not callable"
      );

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
            return fToBind.apply( this instanceof fNOP ? this : oThis || window,
                   aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }

  var $ = (HTMLElement.prototype.$ = function(aQuery) {
    return this.querySelector(aQuery);
  }).bind(document);

  var $$ = (HTMLElement.prototype.$$ = function(aQuery) {
    return this.querySelectorAll(aQuery);
  }).bind(document);

  $$.forEach = function(nodeList, fun) {
    Array.prototype.forEach.call(nodeList, fun);
  }

</script>
<!-- vim: set fdm=marker: }}} -->
</body>
</html>
