<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="author" content="Joachim Vandekerckhove">
  <title>Good coding practice, Part II: Attack of the Classes</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
<style>
  html, .view body { background-color: black; counter-reset: slideidx; }
  body, .view section { background-color: white; border-radius: 12px }
  /* A section is a slide. It's size is 800x600, and this will never change */
  section, .view head > title {
      font-family: 'DejaVu Sans Condensed', 'Liberation Sans', 'Nimbus Sans L', arial, serif;
      font-size: 30px;
  }

  .view section:after {
    counter-increment: slideidx;
    content: counter(slideidx, decimal-leading-zero);
    position: absolute; bottom: -80px; right: 100px;
    color: white;
  }

  .view head > title {
    color: white;
    text-align: center;
    margin: 1em 0 1em 0;
  }

  h1, h2 {
    margin-top: 200px;
    text-align: center;
    font-size: 80px;
  }
  h3 {
    margin: 100px 0 50px 100px;
  }

  ul {
      margin: 50px 200px;
  }
  li > ul {
      margin: 15px 50px;
  }

  p {
    margin: 75px;
    font-size: 50px;
  }

  blockquote {
    height: 100%;
    background-color: black;
    color: white;
    font-size: 60px;
    padding: 50px;
  }
  blockquote:before {
    content: open-quote;
  }
  blockquote:after {
    content: close-quote;
  }

  /* Figures are displayed full-page, with the caption
     on top of the image/video */
  figure {
    background-color: black;
    width: 100%;
    height: 100%;
  }
  figure > * {
    position: absolute;
  }
  figure > img, figure > video {
    width: 100%; height: 100%;
  }
  figcaption {
    margin: 70px;
    font-size: 50px;
  }

  footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 40px;
    text-align: right;
    background-color: #F3F4F8;
    border-top: 1px solid #CCC;
  }

  /* Transition effect */
  /* Feel free to change the transition effect for original
     animations. See here:
     https://developer.mozilla.org/en/CSS/CSS_transitions
     How to use CSS3 Transitions: */
  section {
    -moz-transition: left 400ms linear 0s;
    -webkit-transition: left 400ms linear 0s;
    -ms-transition: left 400ms linear 0s;
    transition: left 400ms linear 0s;
  }
  .view section {
    -moz-transition: none;
    -webkit-transition: none;
    -ms-transition: none;
    transition: none;
  }

  .view section[aria-selected] {
    border: 5px red solid;
  }

  /* Before */
  section { left: -150%; }
  /* Now */
  section[aria-selected] { left: 0; }
  /* After */
  section[aria-selected] ~ section { left: +150%; }

  /* Incremental elements */

  /* By default, visible */
  .incremental > * { opacity: 1; }

  /* The current item */
  .incremental > *[aria-selected] { opacity: 1; }

  /* The items to-be-selected */
  .incremental > *[aria-selected] ~ * { opacity: 0; }

  /* The progressbar, at the bottom of the slides, show the global
     progress of the presentation. */
  #progress-bar {
    height: 2px;
    background: #AAA;
  }
</style>
  <style>
  h1 {
    font-size: 50px;
  }
  p {
    font-size: 25px;
    margin: 15px 50px;
  }
  ul, ol {
    font-size: 25px;
    margin: 15px 75px;
  }
  code {
    color: #8728F1;
  }
  pre code {
    font-size: 20px;
    margin: 15px 50px;
    display: block;
    background-color: #eef;
  }
  </style>
</head>
<body>
<section class="title">
  <h1 class="title">Good coding practice, Part II: Attack of the Classes</h1>
  <footer>
    <span class="author">Joachim Vandekerckhove</span> · 
  </footer>
</section>
<section id="literate-programming" class="title-slide slide level2"><h2>Literate programming</h2></section><section id="section" class="slide level3">
<h3></h3>
<p>Literate programming is when programmers document their steps in a document that also executes the code. This is a popular practice for publishing steps in a data analysis, and common examples are rmarkdown, jupyter, and MATLAB Live Scripts (.mlx).</p>
<p>Often these literate programs use some form of markdown for basic formatting of text.</p>
</section><section id="basic-markdown" class="slide level3">
<h3>Basic markdown</h3>
<p>Markdown is a language for doing very basic markup (get it???/). The absolute basics of it are the use of # for headers (more #s for smaller headers), * and _ and ** for <strong><em>emphasis</em></strong>. The basic philosophy is that you should be able to write a simple text file with simple formatting marks, that is still perfectly readable even if you’re just looking at the unformatted code (as opposed to, say, LaTeX or html, which look weird in source code).</p>
</section><section id="markdown-editors" class="slide level3">
<h3>Markdown editors</h3>
<p>There are very many markdown editors out there. I use one called <a href="https://www.typora.io/">Typora</a>. There are also many tutorials, like <a href="https://daringfireball.net/projects/markdown/syntax">this one</a>.</p>
<p>To see what the markdown code looks like, open this file in a text editor like notepad or nano. Here are some basic demonstrations…</p>
</section><section id="block-quotes" class="slide level3">
<h3>Block quotes</h3>
<p>Make block quotes by starting a line with &gt;</p>
<blockquote>
<p>This is a block quote. It makes it clear that a block of text belongs together and is somewhat separate from the main text.</p>
</blockquote>
</section><section id="code" class="slide level3">
<h3>Code</h3>
<p>Code can be typeset with three backticks ``` :</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb1-1" title="1"><span class="co">% This is a code block.</span></a>
<a class="sourceLine" id="cb1-2" title="2">for he = a_jolly_good_fellow, disp(<span class="st">&#39;hoorah&#39;</span>), end</a></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode r"><code class="sourceCode r"><a class="sourceLine" id="cb2-1" title="1"><span class="co"># This is a code block with R style coloring.</span></a>
<a class="sourceLine" id="cb2-2" title="2">trf &lt;-<span class="st"> </span><span class="kw">typicalRfctn</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">setting_style =</span> <span class="st">&#39;idk&#39;</span>, </a>
<a class="sourceLine" id="cb2-3" title="3">  <span class="dt">inp2 =</span> <span class="cf">function</span> (.) { one =<span class="st"> </span>.}, <span class="dt">optional =</span> data<span class="op">$</span>x)</a></code></pre></div>
<p>You can also use single backticks ` to enclose in-line code examples <code>like this</code>. Also, this looks nice in Slack.</p>
</section><section id="tables" class="slide level3">
<h3>Tables</h3>
<p>You can make tables by drawing them with lines!</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode markdown"><code class="sourceCode markdown"><a class="sourceLine" id="cb3-1" title="1">| Here | comes |    a | table |</a>
<a class="sourceLine" id="cb3-2" title="2">| ---- | ----- | ---: | ----: |</a>
<a class="sourceLine" id="cb3-3" title="3">| oh   | yes   |   it |   is! |</a></code></pre></div>
<table>
<thead>
<tr class="header">
<th>Here</th>
<th>comes</th>
<th style="text-align: right;">a</th>
<th style="text-align: right;">table</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>oh</td>
<td>yes</td>
<td style="text-align: right;">it</td>
<td style="text-align: right;">is!</td>
</tr>
</tbody>
</table>
<p>(The default html slide format doesn’t do tables well.)</p>
</section><section id="lists" class="slide level3">
<h3>Lists</h3>
<p>It’s easy</p>
<ul>
<li>to</li>
<li>make</li>
<li>lists</li>
</ul>
<p>They can also</p>
<ol type="1">
<li>be</li>
<li>ordered</li>
<li>lists</li>
</ol>
</section><section id="links-and-images" class="slide level3">
<h3>Links and images</h3>
<p>Hyperlinks are added like <code>[this](https://cidlab.com)</code>, and figures almost identically with an exclamation mark and an empty text field: <code>![](/path/to/image)</code></p>
<p><img src="p/linux-penguin-small.png" /></p>
</section><section id="html" class="slide level3">
<h3>HTML</h3>
<p>A powerful feature of markdown is that it can be extended by other markup languages if you need more complexity. For example, you can just write html code if you want to, say, scale up an image:</p>
<p><img src="p/linux-penguin-small.png" alt="linux-penguin-small" style="zoom:150%;" /></p>
</section><section id="latex" class="slide level3">
<h3>LaTeX</h3>
<p>You can also insert LaTeX: <br /><span class="math display">0 = <em>e</em><sup><em>π</em><em>i</em></sup> − 1</span><br /></p>
<p>LaTeX often won’t render in your editor, only if you compile. In practice, you don’t want to mix LaTeX and html elements since, depending on what you compile to, one or the other may not render correctly (or at all).</p>
</section><section id="compile" class="slide level3">
<h3>… compile?</h3>
<p>There exist many viewers that natively render and display markdown (the github website is one). However, it is generally easy to compile a .md file to a common format like .pdf, .htm, .doc, and so on. The most powerful (I think) compiler is <a href="https://pandoc.org/">pandoc</a>.</p>
<p>Using pandoc is fairly straightforward, usually you just tell it what you have (source <code>-s</code>) and what you want (output <code>-o</code>), and it does it. For example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" title="1"><span class="ex">pandoc</span> \</a>
<a class="sourceLine" id="cb4-2" title="2">    -s 210-good-coding-practice-part-ii.md \</a>
<a class="sourceLine" id="cb4-3" title="3">    -o 210-good-coding-practice-part-ii.pdf</a></code></pre></div>
</section><section id="make" class="slide level3">
<h3>make</h3>
<p>As a side note, if you find yourself compiling something a lot, especially if it’s a large project with many files, you should check out the <strong><a href="https://makefiletutorial.com/">make</a></strong> utility. make is a simple but clever program controlled by a (file called) Makefile. There are several Makefiles in the course repo, looking a little like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><a class="sourceLine" id="cb5-1" title="1"><span class="dv">all:</span><span class="dt"> metropolis-hastings.pdf html/metropolis_intro.html</span></a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="dv">html/%.html:</span><span class="dt"> %.m</span></a>
<a class="sourceLine" id="cb5-4" title="4">    matlab -batch <span class="st">&quot;rng(0); publish(&#39;</span><span class="ch">$&lt;</span><span class="st">&#39;);&quot;</span></a>
<a class="sourceLine" id="cb5-5" title="5"></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="dv">%.pdf:</span><span class="dt"> %.tex</span></a>
<a class="sourceLine" id="cb5-7" title="7">    pdflatex <span class="ch">$&lt;</span></a></code></pre></div>
</section><section id="section-1" class="slide level3">
<h3></h3>
<p>Not unlike the pandoc command, Makefiles are structured in terms of what you <em>have</em> (sources) and what you <em>want</em> (targets). The structure of each little section of a Makefile is the same:</p>
<pre class="make"><code>target: source
    rule_to_make_target_from_source</code></pre>
<p>Inside a rule, the target is represented as <code>$@</code> and the source as <code>$&lt;</code>. If you have a Makefile in a directory, you can call <code>make</code> from the command line and optionally provide it with a target (by default it will do only the first target). If a source is not available, make will look for a rule to build the source from other sources.</p>
</section><section id="section-2" class="slide level3">
<h3></h3>
<div class="sourceCode" id="cb7"><pre class="sourceCode makefile"><code class="sourceCode makefile"><a class="sourceLine" id="cb7-1" title="1"><span class="dv">all:</span><span class="dt"> metropolis-hastings.pdf html/metropolis_intro.html</span></a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="dv">html/%.html:</span><span class="dt"> %.m</span></a>
<a class="sourceLine" id="cb7-4" title="4">    matlab -batch <span class="st">&quot;rng(0); publish(&#39;</span><span class="ch">$&lt;</span><span class="st">&#39;);&quot;</span></a>
<a class="sourceLine" id="cb7-5" title="5"></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="dv">%.pdf:</span><span class="dt"> %.tex</span></a>
<a class="sourceLine" id="cb7-7" title="7">    pdflatex <span class="ch">$&lt;</span></a></code></pre></div>
<p>In the little example, the target <code>all</code> requires <code>metropolis-hastings.pdf</code>, and for this there exists the rule <code>%.pdf: %.tex</code> so it will look for <code>metropolis-hastings.tex</code> and use <code>pdflatex</code> to get <code>metropolis-hastings.pdf</code> and satisfy the <code>all</code> target.</p>
</section><section id="section-3" class="slide level3">
<h3></h3>
<pre class="make"><code>target: source
    rule_to_make_target_from_source</code></pre>
<p>Cleverly, make will also check that the source file is not <em>newer</em> than the target file. If it is newer, make will rebuild the target even if it exists.</p>
<p>Makefiles can get quite complex, but even easy ones can save you a lot of time! Note that rules can be multiple lines, so you can do relatively complicated things like running entire simulation studies and pushing the results to github.</p>
</section><section id="styles" class="slide level3">
<h3>Styles</h3>
<p>Compiling .md files can yield somewhat vanilla looking documents. However, depending on what you are compiling <em>to</em>, you may be able to spruce things up a little. For example, compiling <code>100-matlab-code-organization.md</code> to .htm slides didn’t look nice, so I added a header file with style modifications. In pandoc, you can add header information with <code>-H</code>, so that Makefile has this rule:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode makefile"><code class="sourceCode makefile"><a class="sourceLine" id="cb9-1" title="1"><span class="dv">%.htm:</span><span class="dt"> %.md styles</span></a>
<a class="sourceLine" id="cb9-2" title="2">    pandoc -t dzslides -s <span class="ch">$&lt;</span> -o <span class="ch">$@</span> --slide-level 3 -H styles</a></code></pre></div>
</section><section id="section-4" class="slide level3">
<h3></h3>
<p>… and <code>styles</code> is just a file with CSS code:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode css"><code class="sourceCode css"><a class="sourceLine" id="cb10-1" title="1">&lt;style<span class="op">&gt;</span></a>
<a class="sourceLine" id="cb10-2" title="2">p {</a>
<a class="sourceLine" id="cb10-3" title="3">  <span class="kw">font-size</span>: <span class="dv">25</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb10-4" title="4">  <span class="kw">margin</span>: <span class="dv">15</span><span class="dt">px</span> <span class="dv">50</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb10-5" title="5">}</a>
<a class="sourceLine" id="cb10-6" title="6">code {</a>
<a class="sourceLine" id="cb10-7" title="7">  <span class="kw">color</span>: <span class="cn">#8728F1</span><span class="op">;</span></a>
<a class="sourceLine" id="cb10-8" title="8">}</a>
<a class="sourceLine" id="cb10-9" title="9">&lt;/style<span class="op">&gt;</span></a></code></pre></div>
<p>Pandoc has a lot of options to customize its output, and make can be used to automate it. I make class slides and papers like this.</p>
</section>
<section id="more-on-classes" class="title-slide slide level1"><h1>More on classes</h1></section><section id="externally-defined-methods" class="slide level3">
<h3>Externally defined methods</h3>
<p>When you implement a MATLAB class, you can either define it in a single <code>.m</code> file that starts with <code>classdef</code>, or you can create a folder that starts with <code>@</code> that also contains a classdef m-file of the same name. You can then define many (<a href="https://www.mathworks.com/help/matlab/matlab_oop/methods-in-separate-files.html#buq1cgq-1">but not all</a>) methods as functions in files in that folder.</p>
<p>Implementing classes as @-folders has a number of advantages, including avoidance of long code, and the ability to include files other than m-files in the class (e.g., p-files, MEX files, .mlx files). The only disadvantage I can think of is for programmers who, for reasons that are their own, share code files through email and want to avoid zip archives and the like.</p>
</section><section id="section-5" class="slide level3">
<h3></h3>
<p>To <a href="https://www.mathworks.com/help/matlab/matlab_oop/methods-in-separate-files.html">define a method externally</a>, simply write it as a function and save it in the @-folder. MATLAB will recognize it as a method of the class, with no attributes.</p>
<p>In order to define attributes for a method (like <code>Static</code> or <code>Access = private</code>), you must register the method in the classdef file. Even if you do not need to define attributes, it seems good practice to register the method anyway. Registering it is simple: create a <code>methods-end</code> block and place the <em>function signature</em> (“stub definition”) in the block, like so:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb11-1" title="1">classdef MyClass</a>
<a class="sourceLine" id="cb11-2" title="2">   methods (Access = private)</a>
<a class="sourceLine" id="cb11-3" title="3">      output = myFunc(obj,arg1,arg2)</a>
<a class="sourceLine" id="cb11-4" title="4">   end</a>
<a class="sourceLine" id="cb11-5" title="5">end</a></code></pre></div>
</section><section id="section-6" class="slide level3">
<h3></h3>
<p>This is especially important for static methods, since MATLAB treats static and ordinary methods differently – static methods are not passed the object when they are called, so incorrectly registering a method (or neglecting to register it) will result in “Too many input arguments” errors.</p>
<p>Unless, of course, you wrote your function defensively, in which case it may just do a wrong thing and give you no clues.</p>
</section><section id="class-hierarchy-and-inheritance" class="slide level3">
<h3>Class hierarchy and inheritance</h3>
<p>Classes can exist in a hierarchy of subclasses and superclasses. Each class can have zeros, one, or more sub- and superclasses.</p>
<p>The relationship is defined in the <code>classdef</code> statement:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb12-1" title="1">classdef Normal &lt; Distribution</a>
<a class="sourceLine" id="cb12-2" title="2"><span class="co">% NORMAL  A class for the normal distribution</span></a>
<a class="sourceLine" id="cb12-3" title="3">...</a>
<a class="sourceLine" id="cb12-4" title="4">end</a></code></pre></div>
</section><section id="section-7" class="slide level3">
<h3></h3>
<p>The superclass <code>Distribution</code> can provide universally applicable methods to all its subclasses:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb13-1" title="1">classdef (Abstract) Distribution</a>
<a class="sourceLine" id="cb13-2" title="2"><span class="co">% Distribution  An abstract class for distributions</span></a>
<a class="sourceLine" id="cb13-3" title="3">...</a>
<a class="sourceLine" id="cb13-4" title="4">    <span class="co">% Ordinary methods apply to objects of the subclass</span></a>
<a class="sourceLine" id="cb13-5" title="5">    methods</a>
<a class="sourceLine" id="cb13-6" title="6">        function yax = deviance(obj, data)</a>
<a class="sourceLine" id="cb13-7" title="7">            yax = -<span class="fl">2</span> * sum(obj.logPdf(data));</a>
<a class="sourceLine" id="cb13-8" title="8">        end</a>
<a class="sourceLine" id="cb13-9" title="9">        function yax = pdf(obj, data)</a>
<a class="sourceLine" id="cb13-10" title="10">            yax = exp(obj.logPdf(data));</a>
<a class="sourceLine" id="cb13-11" title="11">        end</a>
<a class="sourceLine" id="cb13-12" title="12">        function knl = pdfKernel(obj, xax)     </a>
<a class="sourceLine" id="cb13-13" title="13">            knl = exp(obj.logPdfKernel(xax));</a>
<a class="sourceLine" id="cb13-14" title="14">        end</a></code></pre></div>
</section><section id="section-8" class="slide level3">
<h3></h3>
<div class="sourceCode" id="cb14"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb14-1" title="1">        function x = rnd(obj, dims)</a>
<a class="sourceLine" id="cb14-2" title="2">            x = obj.inverseCdf(rand(dims));            </a>
<a class="sourceLine" id="cb14-3" title="3">        end</a>
<a class="sourceLine" id="cb14-4" title="4">        </a>
<a class="sourceLine" id="cb14-5" title="5">        function disp(obj, propertyList)</a>
<a class="sourceLine" id="cb14-6" title="6">            fprintf(<span class="st">&#39;%s distribution with parameters:\n&#39;</span>, ...</a>
<a class="sourceLine" id="cb14-7" title="7">                obj.Name);</a>
<a class="sourceLine" id="cb14-8" title="8">            for p = <span class="fl">1</span>:numel(propertyList)</a>
<a class="sourceLine" id="cb14-9" title="9">                fprintf(<span class="st">&#39;     +  %-20s=%8.4f\n&#39;</span>, ...</a>
<a class="sourceLine" id="cb14-10" title="10">                    propertyList{p}, ...</a>
<a class="sourceLine" id="cb14-11" title="11">                    obj.(propertyList{p}))             </a>
<a class="sourceLine" id="cb14-12" title="12">            end</a>
<a class="sourceLine" id="cb14-13" title="13">            fprintf(<span class="st">&#39;\n&#39;</span>);</a>
<a class="sourceLine" id="cb14-14" title="14">        end</a>
<a class="sourceLine" id="cb14-15" title="15">    end</a></code></pre></div>
</section><section id="section-9" class="slide level3">
<h3></h3>
<div class="sourceCode" id="cb15"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb15-1" title="1"></a>
<a class="sourceLine" id="cb15-2" title="2">    <span class="co">% Abstract methods *must* be implemented by children of the class</span></a>
<a class="sourceLine" id="cb15-3" title="3">    methods (Abstract)</a>
<a class="sourceLine" id="cb15-4" title="4">        cdf(obj, xValue)</a>
<a class="sourceLine" id="cb15-5" title="5">        logPdf(obj, xValue)</a>
<a class="sourceLine" id="cb15-6" title="6">        logPdfKernel(obj, xValue)</a>
<a class="sourceLine" id="cb15-7" title="7">    end</a>
<a class="sourceLine" id="cb15-8" title="8">end</a></code></pre></div>
<p>Subclasses can then omit the methods, override them, or <a href="https://www.mathworks.com/help/matlab/matlab_oop/calling-superclass-methods-on-subclass-objects.html">call them directly</a></p>
<div class="sourceCode" id="cb16"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb16-1" title="1">classdef Normal &lt; Distribution</a>
<a class="sourceLine" id="cb16-2" title="2">...</a>
<a class="sourceLine" id="cb16-3" title="3">    methods</a>
<a class="sourceLine" id="cb16-4" title="4"></a>
<a class="sourceLine" id="cb16-5" title="5">        <span class="co">% % Probability density function</span></a>
<a class="sourceLine" id="cb16-6" title="6">        <span class="co">% function yax = pdf(obj, xax)</span></a>
<a class="sourceLine" id="cb16-7" title="7">        <span class="co">% % Implicitly defined by Distribution</span></a>
<a class="sourceLine" id="cb16-8" title="8">        <span class="co">% end</span></a>
<a class="sourceLine" id="cb16-9" title="9"></a>
<a class="sourceLine" id="cb16-10" title="10">        <span class="co">% % Probability density kernel</span></a>
<a class="sourceLine" id="cb16-11" title="11">        <span class="co">% function knl = pdfKernel(obj, xax)</span></a>
<a class="sourceLine" id="cb16-12" title="12">        <span class="co">% % Implicitly defined by Distribution</span></a>
<a class="sourceLine" id="cb16-13" title="13">        <span class="co">% end</span></a>
<a class="sourceLine" id="cb16-14" title="14"></a>
<a class="sourceLine" id="cb16-15" title="15">        <span class="co">% % Deviance score function</span></a>
<a class="sourceLine" id="cb16-16" title="16">        <span class="co">% function yax = deviance(obj, data)</span></a>
<a class="sourceLine" id="cb16-17" title="17">        <span class="co">% % Implicitly defined by Distribution</span></a>
<a class="sourceLine" id="cb16-18" title="18">        <span class="co">% end</span></a>
<a class="sourceLine" id="cb16-19" title="19">        </a>
<a class="sourceLine" id="cb16-20" title="20">        <span class="co">% Random number generator</span></a>
<a class="sourceLine" id="cb16-21" title="21">        function x = rnd(obj, dims)</a>
<a class="sourceLine" id="cb16-22" title="22">            <span class="co">% This method overrides the superclass method Distribution.rnd()</span></a>
<a class="sourceLine" id="cb16-23" title="23">            x = obj.unstandardize(randn(dims));</a>
<a class="sourceLine" id="cb16-24" title="24">        end</a>
<a class="sourceLine" id="cb16-25" title="25"></a>
<a class="sourceLine" id="cb16-26" title="26">        <span class="co">% Cumulative distribution function</span></a>
<a class="sourceLine" id="cb16-27" title="27">        function yax = cdf(obj, xax)</a>
<a class="sourceLine" id="cb16-28" title="28">            <span class="co">% This method is required for subclasses of Distribution</span></a>
<a class="sourceLine" id="cb16-29" title="29">            zax = obj.standardize(xax);</a>
<a class="sourceLine" id="cb16-30" title="30">            yax = <span class="fl">0.5</span> * (<span class="fl">1</span> + erf(zax ./ sqrt(<span class="fl">2</span>)));</a>
<a class="sourceLine" id="cb16-31" title="31">        end</a>
<a class="sourceLine" id="cb16-32" title="32">        </a>
<a class="sourceLine" id="cb16-33" title="33">        <span class="co">% Log Probability density function</span></a>
<a class="sourceLine" id="cb16-34" title="34">        function yax = logPdf(obj, xax)</a>
<a class="sourceLine" id="cb16-35" title="35">            <span class="co">% This method is required for subclasses of Distribution</span></a>
<a class="sourceLine" id="cb16-36" title="36">            yax = log(obj.ScalingConstant) ...</a>
<a class="sourceLine" id="cb16-37" title="37">                - log(obj.StandardDeviation) ...</a>
<a class="sourceLine" id="cb16-38" title="38">                + obj.logPdfKernel(xax);</a>
<a class="sourceLine" id="cb16-39" title="39">        end</a>
<a class="sourceLine" id="cb16-40" title="40"></a>
<a class="sourceLine" id="cb16-41" title="41">        <span class="co">% Probability density log kernel</span></a>
<a class="sourceLine" id="cb16-42" title="42">        function knl = logPdfKernel(obj, xax)</a>
<a class="sourceLine" id="cb16-43" title="43">            <span class="co">% This method is required for subclasses of Distribution</span></a>
<a class="sourceLine" id="cb16-44" title="44">            zax = obj.standardize(xax);</a>
<a class="sourceLine" id="cb16-45" title="45">            knl =  -<span class="fl">0.5</span> * zax.^<span class="fl">2</span>;</a>
<a class="sourceLine" id="cb16-46" title="46">        end</a>
<a class="sourceLine" id="cb16-47" title="47"></a>
<a class="sourceLine" id="cb16-48" title="48">        <span class="co">% Display method</span></a>
<a class="sourceLine" id="cb16-49" title="49">        function disp(obj)</a>
<a class="sourceLine" id="cb16-50" title="50">            <span class="co">% This method overrides the superclass method Distribution.rnd()</span></a>
<a class="sourceLine" id="cb16-51" title="51">            <span class="co">% Note that it calls the superclass method!</span></a>
<a class="sourceLine" id="cb16-52" title="52">            disp@Distribution(obj, {<span class="st">&#39;Mean&#39;</span>, <span class="st">&#39;StandardDeviation&#39;</span>})</a>
<a class="sourceLine" id="cb16-53" title="53">        end</a>
<a class="sourceLine" id="cb16-54" title="54">        </a>
<a class="sourceLine" id="cb16-55" title="55">        ...</a>
<a class="sourceLine" id="cb16-56" title="56"></a>
<a class="sourceLine" id="cb16-57" title="57">    end</a>
<a class="sourceLine" id="cb16-58" title="58"></a>
<a class="sourceLine" id="cb16-59" title="59">end</a>
<a class="sourceLine" id="cb16-60" title="60">    </a></code></pre></div>
</section><section id="the-handle-superclass" class="slide level3">
<h3>The handle superclass</h3>
<p>There is one superclass that MATLAB provides that is particularly useful. The <a href="https://www.mathworks.com/help/matlab/matlab_oop/the-handle-superclass.html">handle superclass</a> allows for <em>in-place assignment</em>. Normally, when we provide a variable as input to a method (or function), the variable itself is not changed.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb17-1" title="1">&gt;&gt; a = <span class="fl">2</span></a>
<a class="sourceLine" id="cb17-2" title="2">a =</a>
<a class="sourceLine" id="cb17-3" title="3">     <span class="fl">2</span></a>
<a class="sourceLine" id="cb17-4" title="4">&gt;&gt; <span class="fl">3</span>*a</a>
<a class="sourceLine" id="cb17-5" title="5">ans =</a>
<a class="sourceLine" id="cb17-6" title="6">     <span class="fl">6</span></a>
<a class="sourceLine" id="cb17-7" title="7">&gt;&gt; a</a>
<a class="sourceLine" id="cb17-8" title="8">a =</a>
<a class="sourceLine" id="cb17-9" title="9">     <span class="fl">2</span></a></code></pre></div>
</section><section id="section-10" class="slide level3">
<h3></h3>
<p>This is normal and expected behavior. Note that get and set methods are an exception to this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb18-1" title="1">&gt;&gt; n = Normal()</a>
<a class="sourceLine" id="cb18-2" title="2">n = </a>
<a class="sourceLine" id="cb18-3" title="3">  Normal distribution with parameters:</a>
<a class="sourceLine" id="cb18-4" title="4">     +  Mean                =  <span class="fl">0.0000</span></a>
<a class="sourceLine" id="cb18-5" title="5">     +  StandardDeviation   =  <span class="fl">1.0000</span></a>
<a class="sourceLine" id="cb18-6" title="6"></a>
<a class="sourceLine" id="cb18-7" title="7">&gt;&gt; n.StandardDeviation = <span class="fl">2</span></a>
<a class="sourceLine" id="cb18-8" title="8">n = </a>
<a class="sourceLine" id="cb18-9" title="9">  Normal distribution with parameters:</a>
<a class="sourceLine" id="cb18-10" title="10">     +  Mean                =  <span class="fl">0.0000</span></a>
<a class="sourceLine" id="cb18-11" title="11">     +  StandardDeviation   =  <span class="fl">2.0000</span></a></code></pre></div>
<p>Even though we can think of <code>n</code> as an input here, its value is changed!</p>
</section><section id="section-11" class="slide level3">
<h3></h3>
<p>Sometimes it is useful (faster, more efficient) to allow methods to change object properties without overwriting it explicitly. The handle class allows this. Consider these changes to Normal.m…</p>
</section><section id="section-12" class="slide level3">
<h3></h3>
<div class="sourceCode" id="cb19"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb19-1" title="1">classdef Normal &lt; Distribution &amp; handle</a>
<a class="sourceLine" id="cb19-2" title="2">    <span class="co">% NORMAL  A class for the normal distribution</span></a>
<a class="sourceLine" id="cb19-3" title="3">...</a>
<a class="sourceLine" id="cb19-4" title="4">    methods <span class="co">% Note: no output variables!</span></a>
<a class="sourceLine" id="cb19-5" title="5">        <span class="co">% Setter that doesn&#39;t update contingent properties</span></a>
<a class="sourceLine" id="cb19-6" title="6">        function set.StandardDeviation(obj, val)</a>
<a class="sourceLine" id="cb19-7" title="7">            obj.StandardDeviation = val;</a>
<a class="sourceLine" id="cb19-8" title="8">        end</a>
<a class="sourceLine" id="cb19-9" title="9">        <span class="co">% Updater that must be called explicitly</span></a>
<a class="sourceLine" id="cb19-10" title="10">        function updateStandardDeviation(obj)</a>
<a class="sourceLine" id="cb19-11" title="11">            obj.Variance  = obj.StandardDeviation^<span class="fl">2</span>;</a>
<a class="sourceLine" id="cb19-12" title="12">            obj.Precision = <span class="fl">1</span>/obj.Variance;</a>
<a class="sourceLine" id="cb19-13" title="13">        end</a>
<a class="sourceLine" id="cb19-14" title="14">        <span class="co">% Print the variance, too</span></a>
<a class="sourceLine" id="cb19-15" title="15">        function disp(obj)</a>
<a class="sourceLine" id="cb19-16" title="16">            disp@Distribution(obj, ...</a>
<a class="sourceLine" id="cb19-17" title="17">                {<span class="st">&#39;Mean&#39;</span>, <span class="st">&#39;StandardDeviation&#39;</span>, <span class="st">&#39;Variance&#39;</span>})</a>
<a class="sourceLine" id="cb19-18" title="18">        end</a>
<a class="sourceLine" id="cb19-19" title="19">    end</a>
<a class="sourceLine" id="cb19-20" title="20">...</a></code></pre></div>
</section><section id="section-13" class="slide level3">
<h3></h3>
<p>With that, this can happen:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb20-1" title="1">&gt;&gt; n = Normal()</a>
<a class="sourceLine" id="cb20-2" title="2">n = </a>
<a class="sourceLine" id="cb20-3" title="3">  Normal distribution with parameters:</a>
<a class="sourceLine" id="cb20-4" title="4">     +  Mean                =  <span class="fl">0.0000</span></a>
<a class="sourceLine" id="cb20-5" title="5">     +  StandardDeviation   =  <span class="fl">1.0000</span></a>
<a class="sourceLine" id="cb20-6" title="6">     +  Variance            =        </a>
<a class="sourceLine" id="cb20-7" title="7">&gt;&gt; n.updateStandardDeviation</a>
<a class="sourceLine" id="cb20-8" title="8">&gt;&gt; n</a>
<a class="sourceLine" id="cb20-9" title="9">n = </a>
<a class="sourceLine" id="cb20-10" title="10">  Normal distribution with parameters:</a>
<a class="sourceLine" id="cb20-11" title="11">     +  Mean                =  <span class="fl">0.0000</span></a>
<a class="sourceLine" id="cb20-12" title="12">     +  StandardDeviation   =  <span class="fl">1.0000</span></a>
<a class="sourceLine" id="cb20-13" title="13">     +  Variance            =  <span class="fl">1.0000</span></a></code></pre></div>
<p>This will come in handy in future weeks!</p>
</section>
<section id="other-matlab-tools-and-tricks" class="title-slide slide level1"><h1>Other MATLAB tools and tricks</h1></section><section id="m-lint" class="slide level3">
<h3>m-lint</h3>
<p>Did you know the MATLAB IDE comes with its own spell checker? Software that automatically gives you feedback on code is often called <em>linting</em> software.</p>
<p><img src="p/mlint.png" /></p>
</section><section id="error-handling" class="slide level3">
<h3>Error handling</h3>
<p>Throwing errors is most straightforward with <code>error()</code>, but you can do fancier things like throwing an error <em>as if the error was made by the calling function</em>. You can make an Exception object for this.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb21-1" title="1">function mustBeSymmetric(val)</a>
<a class="sourceLine" id="cb21-2" title="2"><span class="co">% MUSTBESYMMETRIC Check that a matrix is symmetric</span></a>
<a class="sourceLine" id="cb21-3" title="3">if any(val ~= val&#39;)</a>
<a class="sourceLine" id="cb21-4" title="4">    errorId  = <span class="st">&#39;Norm2d:isSymmetric&#39;</span>;</a>
<a class="sourceLine" id="cb21-5" title="5">    errorMsg = <span class="st">&#39;The matrix is not symmetric.&#39;</span>;</a>
<a class="sourceLine" id="cb21-6" title="6">    throwAsCaller(MException(errorId,errorMsg))</a>
<a class="sourceLine" id="cb21-7" title="7">end</a></code></pre></div>
</section><section id="section-14" class="slide level3">
<h3></h3>
<p>MATLAB will gladly make Exception objects for you. The most common way you’ll encounter that is with the <a href="https://www.mathworks.com/help/matlab/ref/try.html"><code>try-catch</code> block</a>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb22-1" title="1">try</a>
<a class="sourceLine" id="cb22-2" title="2">   V = not well written;</a>
<a class="sourceLine" id="cb22-3" title="3">catch me</a>
<a class="sourceLine" id="cb22-4" title="4">   fprintf(<span class="st">&#39;Encountered an error with message:\n  %s&#39;</span>, ...</a>
<a class="sourceLine" id="cb22-5" title="5">       me.message)</a>
<a class="sourceLine" id="cb22-6" title="6">   disp(<span class="st">&#39;I&#39;&#39;m just going to carry on, see what happens.&#39;</span>)</a>
<a class="sourceLine" id="cb22-7" title="7">end </a></code></pre></div>
</section><section id="the-test-class" class="slide level3">
<h3>The <code>test</code> class</h3>
<p>MATLAB has test suites built in. To use them, create a new function file (e.g., <code>NormalTest.m</code>) and construct as follows:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb23-1" title="1">function tests = NormalTest</a>
<a class="sourceLine" id="cb23-2" title="2"><span class="co">% NORMALTEST  Create test suite for Normal class</span></a>
<a class="sourceLine" id="cb23-3" title="3">    tests = functiontests(localfunctions);</a>
<a class="sourceLine" id="cb23-4" title="4">end</a>
<a class="sourceLine" id="cb23-5" title="5"></a>
<a class="sourceLine" id="cb23-6" title="6"><span class="co">% Local test* functions as subfunctions</span></a>
<a class="sourceLine" id="cb23-7" title="7">function testPdf(testCase)</a>
<a class="sourceLine" id="cb23-8" title="8">    Mean = <span class="fl">1</span>;    StandardDeviation = <span class="fl">2</span>;    Value = <span class="fl">0</span>;</a>
<a class="sourceLine" id="cb23-9" title="9">    expected = normpdf(Value, Mean, StandardDeviation);</a>
<a class="sourceLine" id="cb23-10" title="10">    actual   = Normal(Mean, StandardDeviation).pdf(Value);</a>
<a class="sourceLine" id="cb23-11" title="11">    verifyEqual(testCase, expectedValue, actualValue)</a>
<a class="sourceLine" id="cb23-12" title="12">end</a>
<a class="sourceLine" id="cb23-13" title="13"></a>
<a class="sourceLine" id="cb23-14" title="14">...</a></code></pre></div>
</section><section id="section-15" class="slide level3">
<h3></h3>
<p>Here, <code>verifyEqual</code> is only one of a <a href="https://www.mathworks.com/help/matlab/matlab_prog/write-function-based-unit-tests.html">long list of possible tests</a>.</p>
<p>You can run the test suite by simply passing the output of the function to <code>run()</code>:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode matlab"><code class="sourceCode matlab"><a class="sourceLine" id="cb24-1" title="1">&gt;&gt; run(NormalTest);</a>
<a class="sourceLine" id="cb24-2" title="2">Running NormalTest</a>
<a class="sourceLine" id="cb24-3" title="3">.</a>
<a class="sourceLine" id="cb24-4" title="4">Done NormalTest</a>
<a class="sourceLine" id="cb24-5" title="5">__________</a></code></pre></div>
</section>
<section id="assignment" class="title-slide slide level1"><h1>Assignment</h1></section><section id="clean-up-your-code" class="slide level3">
<h3>Clean up your code</h3>
<ol type="1">
<li>Write a test suite for your Norm2d class using the MATLAB built in functionality. The suite should contain at least three tests, at least one of which users <code>verifyError()</code>.</li>
<li>Resolve any m-lint messages in any .m file in your assignment directory.</li>
</ol>
</section>
<!-- {{{{ dzslides core
#
#
#     __  __  __       .  __   ___  __
#    |  \  / /__` |    | |  \ |__  /__`
#    |__/ /_ .__/ |___ | |__/ |___ .__/ core :€
#
#
# The following block of code is not supposed to be edited.
# But if you want to change the behavior of these slides,
# feel free to hack it!
#
-->

<div id="progress-bar"></div>

<!-- Default Style -->
<style>
  * { margin: 0; padding: 0; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }
  [role="note"] { display: none; }
  body {
    width: 800px; height: 600px;
    margin-left: -400px; margin-top: -300px;
    position: absolute; top: 50%; left: 50%;
    overflow: hidden;
    display: none;
  }
  .view body {
    position: static;
    margin: 0; padding: 0;
    width: 100%; height: 100%;
    display: inline-block;
    overflow: visible; overflow-x: hidden;
    /* undo Dz.onresize */
    transform: none !important;
    -moz-transform: none !important;
    -webkit-transform: none !important;
    -o-transform: none !important;
    -ms-transform: none !important;
  }
  .view head, .view head > title { display: block }
  section {
    position: absolute;
    pointer-events: none;
    width: 100%; height: 100%;
  }
  .view section {
    pointer-events: auto;
    position: static;
    width: 800px; height: 600px;
    margin: -150px -200px;
    float: left;

    transform: scale(.4);
    -moz-transform: scale(.4);
    -webkit-transform: scale(.4);
    -o-transform: scale(.4);
    -ms-transform: scale(.4);
  }
  .view section > * { pointer-events: none; }
  section[aria-selected] { pointer-events: auto; }
  html { overflow: hidden; }
  html.view { overflow: visible; }
  body.loaded { display: block; }
  .incremental {visibility: hidden; }
  .incremental[active] {visibility: visible; }
  #progress-bar{
    bottom: 0;
    position: absolute;
    -moz-transition: width 400ms linear 0s;
    -webkit-transition: width 400ms linear 0s;
    -ms-transition: width 400ms linear 0s;
    transition: width 400ms linear 0s;
  }
  .view #progress-bar {
    display: none;
  }
</style>

<script>
  var Dz = {
    remoteWindows: [],
    idx: -1,
    step: 0,
    html: null,
    slides: null,
    progressBar : null,
    params: {
      autoplay: "1"
    }
  };

  Dz.init = function() {
    document.body.className = "loaded";
    this.slides = Array.prototype.slice.call($$("body > section"));
    this.progressBar = $("#progress-bar");
    this.html = document.body.parentNode;
    this.setupParams();
    this.onhashchange();
    this.setupTouchEvents();
    this.onresize();
    this.setupView();
  }

  Dz.setupParams = function() {
    var p = window.location.search.substr(1).split('&');
    p.forEach(function(e, i, a) {
      var keyVal = e.split('=');
      Dz.params[keyVal[0]] = decodeURIComponent(keyVal[1]);
    });
  // Specific params handling
    if (!+this.params.autoplay)
      $$.forEach($$("video"), function(v){ v.controls = true });
  }

  Dz.onkeydown = function(aEvent) {
    // Don't intercept keyboard shortcuts
    if (aEvent.altKey
      || aEvent.ctrlKey
      || aEvent.metaKey
      || aEvent.shiftKey) {
      return;
    }
    if ( aEvent.keyCode == 37 // left arrow
      || aEvent.keyCode == 38 // up arrow
      || aEvent.keyCode == 33 // page up
    ) {
      aEvent.preventDefault();
      this.back();
    }
    if ( aEvent.keyCode == 39 // right arrow
      || aEvent.keyCode == 40 // down arrow
      || aEvent.keyCode == 34 // page down
    ) {
      aEvent.preventDefault();
      this.forward();
    }
    if (aEvent.keyCode == 35) { // end
      aEvent.preventDefault();
      this.goEnd();
    }
    if (aEvent.keyCode == 36) { // home
      aEvent.preventDefault();
      this.goStart();
    }
    if (aEvent.keyCode == 32) { // space
      aEvent.preventDefault();
      this.toggleContent();
    }
    if (aEvent.keyCode == 70) { // f
      aEvent.preventDefault();
      this.goFullscreen();
    }
    if (aEvent.keyCode == 79) { // o
      aEvent.preventDefault();
      this.toggleView();
    }
  }

  /* Touch Events */

  Dz.setupTouchEvents = function() {
    var orgX, newX;
    var tracking = false;

    var db = document.body;
    db.addEventListener("touchstart", start.bind(this), false);
    db.addEventListener("touchmove", move.bind(this), false);

    function start(aEvent) {
      aEvent.preventDefault();
      tracking = true;
      orgX = aEvent.changedTouches[0].pageX;
    }

    function move(aEvent) {
      if (!tracking) return;
      newX = aEvent.changedTouches[0].pageX;
      if (orgX - newX > 100) {
        tracking = false;
        this.forward();
      } else {
        if (orgX - newX < -100) {
          tracking = false;
          this.back();
        }
      }
    }
  }

  Dz.setupView = function() {
    document.body.addEventListener("click", function ( e ) {
      if (!Dz.html.classList.contains("view")) return;
      if (!e.target || e.target.nodeName != "SECTION") return;

      Dz.html.classList.remove("view");
      Dz.setCursor(Dz.slides.indexOf(e.target) + 1);
    }, false);
  }

  /* Adapt the size of the slides to the window */

  Dz.onresize = function() {
    var db = document.body;
    var sx = db.clientWidth / window.innerWidth;
    var sy = db.clientHeight / window.innerHeight;
    var transform = "scale(" + (1/Math.max(sx, sy)) + ")";

    db.style.MozTransform = transform;
    db.style.WebkitTransform = transform;
    db.style.OTransform = transform;
    db.style.msTransform = transform;
    db.style.transform = transform;
  }


  Dz.getNotes = function(aIdx) {
    var s = $("section:nth-of-type(" + aIdx + ")");
    var d = s.$("[role='note']");
    return d ? d.innerHTML : "";
  }

  Dz.onmessage = function(aEvent) {
    var argv = aEvent.data.split(" "), argc = argv.length;
    argv.forEach(function(e, i, a) { a[i] = decodeURIComponent(e) });
    var win = aEvent.source;
    if (argv[0] === "REGISTER" && argc === 1) {
      this.remoteWindows.push(win);
      this.postMsg(win, "REGISTERED", document.title, this.slides.length);
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
      return;
    }
    if (argv[0] === "BACK" && argc === 1)
      this.back();
    if (argv[0] === "FORWARD" && argc === 1)
      this.forward();
    if (argv[0] === "START" && argc === 1)
      this.goStart();
    if (argv[0] === "END" && argc === 1)
      this.goEnd();
    if (argv[0] === "TOGGLE_CONTENT" && argc === 1)
      this.toggleContent();
    if (argv[0] === "SET_CURSOR" && argc === 2)
      window.location.hash = "#" + argv[1];
    if (argv[0] === "GET_CURSOR" && argc === 1)
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
    if (argv[0] === "GET_NOTES" && argc === 1)
      this.postMsg(win, "NOTES", this.getNotes(this.idx));
  }

  Dz.toggleContent = function() {
    // If a Video is present in this new slide, play it.
    // If a Video is present in the previous slide, stop it.
    var s = $("section[aria-selected]");
    if (s) {
      var video = s.$("video");
      if (video) {
        if (video.ended || video.paused) {
          video.play();
        } else {
          video.pause();
        }
      }
    }
  }

  Dz.setCursor = function(aIdx, aStep) {
    // If the user change the slide number in the URL bar, jump
    // to this slide.
    aStep = (aStep != 0 && typeof aStep !== "undefined") ? "." + aStep : ".0";
    window.location.hash = "#" + aIdx + aStep;
  }

  Dz.onhashchange = function() {
    var cursor = window.location.hash.split("#"),
        newidx = 1,
        newstep = 0;
    if (cursor.length == 2) {
      newidx = ~~cursor[1].split(".")[0];
      newstep = ~~cursor[1].split(".")[1];
      if (newstep > Dz.slides[newidx - 1].$$('.incremental > *').length) {
        newstep = 0;
        newidx++;
      }
    }
    this.setProgress(newidx, newstep);
    if (newidx != this.idx) {
      this.setSlide(newidx);
    }
    if (newstep != this.step) {
      this.setIncremental(newstep);
    }
    for (var i = 0; i < this.remoteWindows.length; i++) {
      this.postMsg(this.remoteWindows[i], "CURSOR", this.idx + "." + this.step);
    }
  }

  Dz.back = function() {
    if (this.idx == 1 && this.step == 0) {
      return;
    }
    if (this.step == 0) {
      this.setCursor(this.idx - 1,
                     this.slides[this.idx - 2].$$('.incremental > *').length);
    } else {
      this.setCursor(this.idx, this.step - 1);
    }
  }

  Dz.forward = function() {
    if (this.idx >= this.slides.length &&
        this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
        return;
    }
    if (this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
      this.setCursor(this.idx + 1, 0);
    } else {
      this.setCursor(this.idx, this.step + 1);
    }
  }

  Dz.goStart = function() {
    this.setCursor(1, 0);
  }

  Dz.goEnd = function() {
    var lastIdx = this.slides.length;
    var lastStep = this.slides[lastIdx - 1].$$('.incremental > *').length;
    this.setCursor(lastIdx, lastStep);
  }

  Dz.toggleView = function() {
    this.html.classList.toggle("view");

    if (this.html.classList.contains("view")) {
      $("section[aria-selected]").scrollIntoView(true);
    }
  }

  Dz.setSlide = function(aIdx) {
    this.idx = aIdx;
    var old = $("section[aria-selected]");
    var next = $("section:nth-of-type("+ this.idx +")");
    if (old) {
      old.removeAttribute("aria-selected");
      var video = old.$("video");
      if (video) {
        video.pause();
      }
    }
    if (next) {
      next.setAttribute("aria-selected", "true");
      if (this.html.classList.contains("view")) {
        next.scrollIntoView();
      }
      var video = next.$("video");
      if (video && !!+this.params.autoplay) {
        video.play();
      }
    } else {
      // That should not happen
      this.idx = -1;
      // console.warn("Slide doesn't exist.");
    }
  }

  Dz.setIncremental = function(aStep) {
    this.step = aStep;
    var old = this.slides[this.idx - 1].$('.incremental > *[aria-selected]');
    if (old) {
      old.removeAttribute('aria-selected');
    }
    var incrementals = $$('.incremental');
    if (this.step <= 0) {
      $$.forEach(incrementals, function(aNode) {
        aNode.removeAttribute('active');
      });
      return;
    }
    var next = this.slides[this.idx - 1].$$('.incremental > *')[this.step - 1];
    if (next) {
      next.setAttribute('aria-selected', true);
      next.parentNode.setAttribute('active', true);
      var found = false;
      $$.forEach(incrementals, function(aNode) {
        if (aNode != next.parentNode)
          if (found)
            aNode.removeAttribute('active');
          else
            aNode.setAttribute('active', true);
        else
          found = true;
      });
    } else {
      setCursor(this.idx, 0);
    }
    return next;
  }

  Dz.goFullscreen = function() {
    var html = $('html'),
        requestFullscreen = html.requestFullscreen || html.requestFullScreen || html.mozRequestFullScreen || html.webkitRequestFullScreen;
    if (requestFullscreen) {
      requestFullscreen.apply(html);
    }
  }
  
  Dz.setProgress = function(aIdx, aStep) {
    var slide = $("section:nth-of-type("+ aIdx +")");
    if (!slide)
      return;
    var steps = slide.$$('.incremental > *').length + 1,
        slideSize = 100 / (this.slides.length - 1),
        stepSize = slideSize / steps;
    this.progressBar.style.width = ((aIdx - 1) * slideSize + aStep * stepSize) + '%';
  }
  
  Dz.postMsg = function(aWin, aMsg) { // [arg0, [arg1...]]
    aMsg = [aMsg];
    for (var i = 2; i < arguments.length; i++)
      aMsg.push(encodeURIComponent(arguments[i]));
    aWin.postMessage(aMsg.join(" "), "*");
  }
  
  function init() {
    Dz.init();
    window.onkeydown = Dz.onkeydown.bind(Dz);
    window.onresize = Dz.onresize.bind(Dz);
    window.onhashchange = Dz.onhashchange.bind(Dz);
    window.onmessage = Dz.onmessage.bind(Dz);
  }

  window.onload = init;
</script>


<script> // Helpers
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {

      // closest thing possible to the ECMAScript 5 internal IsCallable
      // function 
      if (typeof this !== "function")
      throw new TypeError(
        "Function.prototype.bind - what is trying to be fBound is not callable"
      );

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
            return fToBind.apply( this instanceof fNOP ? this : oThis || window,
                   aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }

  var $ = (HTMLElement.prototype.$ = function(aQuery) {
    return this.querySelector(aQuery);
  }).bind(document);

  var $$ = (HTMLElement.prototype.$$ = function(aQuery) {
    return this.querySelectorAll(aQuery);
  }).bind(document);

  $$.forEach = function(nodeList, fun) {
    Array.prototype.forEach.call(nodeList, fun);
  }

</script>
<!-- vim: set fdm=marker: }}} -->
</body>
</html>
