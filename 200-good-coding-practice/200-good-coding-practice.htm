<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="author" content="Joachim Vandekerckhove">
  <title>Good coding practice</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
<style>
  html, .view body { background-color: black; counter-reset: slideidx; }
  body, .view section { background-color: white; border-radius: 12px }
  /* A section is a slide. It's size is 800x600, and this will never change */
  section, .view head > title {
      font-family: 'DejaVu Sans Condensed', 'Liberation Sans', 'Nimbus Sans L', arial, serif;
      font-size: 30px;
  }

  .view section:after {
    counter-increment: slideidx;
    content: counter(slideidx, decimal-leading-zero);
    position: absolute; bottom: -80px; right: 100px;
    color: white;
  }

  .view head > title {
    color: white;
    text-align: center;
    margin: 1em 0 1em 0;
  }

  h1, h2 {
    margin-top: 200px;
    text-align: center;
    font-size: 80px;
  }
  h3 {
    margin: 100px 0 50px 100px;
  }

  ul {
      margin: 50px 200px;
  }
  li > ul {
      margin: 15px 50px;
  }

  p {
    margin: 75px;
    font-size: 50px;
  }

  blockquote {
    height: 100%;
    background-color: black;
    color: white;
    font-size: 60px;
    padding: 50px;
  }
  blockquote:before {
    content: open-quote;
  }
  blockquote:after {
    content: close-quote;
  }

  /* Figures are displayed full-page, with the caption
     on top of the image/video */
  figure {
    background-color: black;
    width: 100%;
    height: 100%;
  }
  figure > * {
    position: absolute;
  }
  figure > img, figure > video {
    width: 100%; height: 100%;
  }
  figcaption {
    margin: 70px;
    font-size: 50px;
  }

  footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 40px;
    text-align: right;
    background-color: #F3F4F8;
    border-top: 1px solid #CCC;
  }

  /* Transition effect */
  /* Feel free to change the transition effect for original
     animations. See here:
     https://developer.mozilla.org/en/CSS/CSS_transitions
     How to use CSS3 Transitions: */
  section {
    -moz-transition: left 400ms linear 0s;
    -webkit-transition: left 400ms linear 0s;
    -ms-transition: left 400ms linear 0s;
    transition: left 400ms linear 0s;
  }
  .view section {
    -moz-transition: none;
    -webkit-transition: none;
    -ms-transition: none;
    transition: none;
  }

  .view section[aria-selected] {
    border: 5px red solid;
  }

  /* Before */
  section { left: -150%; }
  /* Now */
  section[aria-selected] { left: 0; }
  /* After */
  section[aria-selected] ~ section { left: +150%; }

  /* Incremental elements */

  /* By default, visible */
  .incremental > * { opacity: 1; }

  /* The current item */
  .incremental > *[aria-selected] { opacity: 1; }

  /* The items to-be-selected */
  .incremental > *[aria-selected] ~ * { opacity: 0; }

  /* The progressbar, at the bottom of the slides, show the global
     progress of the presentation. */
  #progress-bar {
    height: 2px;
    background: #AAA;
  }
</style>
</head>
<body>
<section class="title">
  <h1 class="title">Good coding practice</h1>
  <footer>
    <span class="author">Joachim Vandekerckhove</span> · 
  </footer>
</section>
<section class="slide level1">

<h2 id="agile-development">Agile development</h2>
<p>One of a number of approaches to software development</p>
<p>Facilitates collaboration, robustness, and adaptability over time</p>
<p>These are <em>qualitative and social</em> considerations</p>
<p>The compiler doesn’t care</p>
<p>Goal is to support working with an adviser or colleague and enhance reproducibility and reusability of your code</p>
<p>“The user” is either “your boss,” “a reviewer,” or (most commonly) “you in a few months”</p>
</section>
<section class="slide level1">

<h2 id="contract-programming">Contract programming</h2>
<p>Start each public function with a “contract”:</p>
<ul>
<li>A list of preconditions that the function expects</li>
<li>A description of what the function will then provide</li>
</ul>
<p>Different from <em>defensive programming</em>, where your code tries to figure out what you might have meant and tries something. Defensive programming is more work and more likely to cause confusion.</p>
<p>Functions designed by contract are simpler to write. You let them “fail fast and hard” – they just give an error if preconditions are not met (i.e., wrong input was given).</p>
</section>
<section class="slide level1">

<h2 id="test-driven-development">Test driven development</h2>
<h3 id="development-steps-of-tdd">Development steps of TDD</h3>
<ol type="1">
<li>Design: Write a test for a desired behavior</li>
<li>Implement: Whip up code that passes the test</li>
<li>Refactor: Eliminate all duplication in the code</li>
</ol>
<h3 id="basic-rules-of-tdd">Basic rules of TDD</h3>
<ul>
<li>Write new code only if an automated test has failed</li>
<li>Eliminate duplication</li>
</ul>
</section>
<section class="slide level1">

<p><img src="p/tdd.png" /></p>
</section>
<section class="slide level1">

<h2 id="continuous-integration">Continuous integration</h2>
<p>For larger projects with many collaborators, the testing is often automated</p>
<p>Continuous integration tools can, for example, checkout your git repository or branch, compile software, run test suites on many different machines, and report to you.</p>
<p>This is most useful in industry contexts, where updated products are delivered constantly.</p>
<p>Sometimes useful for academics, for example with long-running online experiments, or if some collaborators need their code sanity-checked before it is added to the lab’s shared codebase.</p>
</section>
<section class="slide level1">

<h2 id="refactoring">Refactoring</h2>
<p>Martin Fowler (1999). <em>Refactoring – Improving the Design of Existing Code.</em></p>
<h3 id="code-smells">Code smells</h3>
<p>When to refactor? — When code smells.</p>
<p><img src="p/smells.jpg" /></p>
</section>
<section class="slide level1">

<h3 id="dry-smell">DRY smell</h3>
<p><strong>Don’t Repeat Yourself</strong></p>
<ul>
<li>If a large chunk of code appears in multiple functions, it should probably be its own function</li>
<li>If a small bit of code is repeated over and over again in a function, it should maybe be an intermediate variable</li>
</ul>
<p>If a piece of code appears multiple times despite serving the same purpose, one risk is that one version is overlooked when your collaborator improves code.</p>
<p>A trickier DRY smell is when two methods do the same thing with different algorithms. Then you need to think about whether they are really doing the same, and if so use the better algorithm both times – from its own function of course.</p>
</section>
<section class="slide level1">

<h3 id="long-function-smell">Long function smell</h3>
<p>Programs written in one long file work just as well as tons of little function delegating to each other</p>
<p><em>However</em>, collections of smaller functions that call each other are easier to maintain by future you</p>
<p>Splitting a long function into smaller ones that call each other is sometimes called <em>indirection</em>.</p>
<p>Advantages of indirection include</p>
<ul>
<li>The function can be used multiple places and only has to be maintained once</li>
<li>If done well, smaller functions abstract away some of the code into more readable function calls (and the code almost comments itself!)</li>
</ul>
<p>If a long function has comments like “in this section, we’re going to do xyz…” that’s a signal that some semantic distance is being created. That section should probably be its own function called <code>xyz_doer()</code></p>
<p>Modern programming languages have essentially no performance penalty for function calls</p>
</section>
<section class="slide level1">

<h3 id="long-parameter-list-smell">Long parameter list smell</h3>
<p>Get a load of this:</p>
<pre><code>[a, b, c, d] = mySadFun(e, f, g, h, e3, t, y, dd);</code></pre>
<p>This is hard to use and understand. Most likely the function is too complex to be easily read.</p>
<p>If you really need to do this, collect your input in a single parameter object, which could be a structure:</p>
<pre><code>out  =  myFunFun(parameters) ;
...</code></pre>
<p>or a class:</p>
<pre><code>par  =  Parameter()    ;
out  =  par.myFunFun() ;
...</code></pre>
</section>
<section class="slide level1">

<h3 id="code-deodorant-smell">Code deodorant smell</h3>
<p>Commenting code is good, but sometimes comments can smell bad.</p>
<p>If comments are full of warnings about strange ways a function needs to be conditioned to behave well, that implies the function may be prone to erroneous use or be poorly implemented.</p>
<p>This often indicates a scenario where the correct action is <em>not</em> to refactor, but to start over.</p>
</section>
<section class="slide level1">

<h3 id="other-smells">Other smells</h3>
<ul>
<li>Shotgun surgery – if you’re making a change, are you in one place in your code or are you updating in multiple places to do a single thing?
<ul>
<li>You should probably be putting those different bits of code into a class that you then call from those places.</li>
</ul></li>
<li>Divergent change – do you find yourself updating a function to work one way, and then later back to work another way because the data are now different?
<ul>
<li>That should probably be two functions.</li>
</ul></li>
<li>Speculative machinery – addition of functionality that isn’t used but may be used one day.
<ul>
<li>It might break, confuse users, and why do now what you might not need to do later?</li>
</ul></li>
</ul>
</section>
<section id="assignment-for-today" class="slide level1">
<h1>Assignment for today</h1>
<p>Review <span class="citation" data-cites="Norm2d">@Norm2d</span> as implemented by the student after you in the alphabet (JieWan review adri, adri review angela, etc.).</p>
<ol type="1">
<li>Clone their own repository and examine their solution in the assignment folder</li>
<li>Run the test suite and note any issues</li>
<li>Read the code line by line and add comments for these code smells:
<ul>
<li>Repetitive code / redundancy</li>
<li>Uninterpretable / long code that does many things</li>
<li>Broken functions / lack of functionality not picked up by test suite</li>
<li>Unnecessary complexity / possible simplification</li>
</ul></li>
<li>Make improvements (and keep running the test suite)</li>
<li>Commit each change with an informative message, comment on <em>why</em> you made a change (be nice!)</li>
<li>Open a pull request to the forked repository</li>
</ol>
<p>Optional: In addition to the student before you in the alphabet, conduct a similar review of the instructor’s code (including the test suite) and see if you can find errors or inefficiencies. Finding errors in the instructor’s code earns <strong>no</strong> credit.</p>
</section>
<section id="homework-automated-report-generation" class="slide level1">
<h1>Homework: Automated report generation</h1>
<p>Imagine that we are keeping track of some behavioral data that is placed in a file on a website. There are two variables of interest, x and y, and we want to be able to rapidly report their mean, variance, and correlation. Add:</p>
<ol type="1">
<li>a static method <code>Norm2d().estimate(data)</code> that takes a 2xN matrix and returns a Norm2d object with Mean and Covariance computed from data (and all contingent properties updated)</li>
<li><code>pseudonym/main.m % entry point function, has settings, calls required functions</code></li>
<li><code>pseudonym/getData.m % downloads a data file from a url</code></li>
<li><code>pseudonym/readData.m % reads the data file into a variable</code></li>
<li><code>pseudonym/report.m % prints a report to file in markdown format</code></li>
<li><code>pseudonym/test.m % tests each function and method in the package</code></li>
<li><code>pseudonym/Contents.m % prints help text for all functions</code></li>
</ol>
<ul>
<li>You may want to add additional functions, be sure to add+commit those.</li>
<li>Follow principles of contract programming and test driven development.</li>
<li>The url is http://www.cidlab.com/files/cogs205b.csv</li>
<li>Name the output file <code>pseudonym-1.md</code> and save to your directory. Don’t just print naked numbers – add some formatting and text.</li>
<li>If a user deletes the report, then running <code>pseudonym.main()</code> should regenerate it, starting with downloading the data.</li>
</ul>
</section>
<!-- {{{{ dzslides core
#
#
#     __  __  __       .  __   ___  __
#    |  \  / /__` |    | |  \ |__  /__`
#    |__/ /_ .__/ |___ | |__/ |___ .__/ core :€
#
#
# The following block of code is not supposed to be edited.
# But if you want to change the behavior of these slides,
# feel free to hack it!
#
-->

<div id="progress-bar"></div>

<!-- Default Style -->
<style>
  * { margin: 0; padding: 0; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }
  [role="note"] { display: none; }
  body {
    width: 800px; height: 600px;
    margin-left: -400px; margin-top: -300px;
    position: absolute; top: 50%; left: 50%;
    overflow: hidden;
    display: none;
  }
  .view body {
    position: static;
    margin: 0; padding: 0;
    width: 100%; height: 100%;
    display: inline-block;
    overflow: visible; overflow-x: hidden;
    /* undo Dz.onresize */
    transform: none !important;
    -moz-transform: none !important;
    -webkit-transform: none !important;
    -o-transform: none !important;
    -ms-transform: none !important;
  }
  .view head, .view head > title { display: block }
  section {
    position: absolute;
    pointer-events: none;
    width: 100%; height: 100%;
  }
  .view section {
    pointer-events: auto;
    position: static;
    width: 800px; height: 600px;
    margin: -150px -200px;
    float: left;

    transform: scale(.4);
    -moz-transform: scale(.4);
    -webkit-transform: scale(.4);
    -o-transform: scale(.4);
    -ms-transform: scale(.4);
  }
  .view section > * { pointer-events: none; }
  section[aria-selected] { pointer-events: auto; }
  html { overflow: hidden; }
  html.view { overflow: visible; }
  body.loaded { display: block; }
  .incremental {visibility: hidden; }
  .incremental[active] {visibility: visible; }
  #progress-bar{
    bottom: 0;
    position: absolute;
    -moz-transition: width 400ms linear 0s;
    -webkit-transition: width 400ms linear 0s;
    -ms-transition: width 400ms linear 0s;
    transition: width 400ms linear 0s;
  }
  .view #progress-bar {
    display: none;
  }
</style>

<script>
  var Dz = {
    remoteWindows: [],
    idx: -1,
    step: 0,
    html: null,
    slides: null,
    progressBar : null,
    params: {
      autoplay: "1"
    }
  };

  Dz.init = function() {
    document.body.className = "loaded";
    this.slides = Array.prototype.slice.call($$("body > section"));
    this.progressBar = $("#progress-bar");
    this.html = document.body.parentNode;
    this.setupParams();
    this.onhashchange();
    this.setupTouchEvents();
    this.onresize();
    this.setupView();
  }

  Dz.setupParams = function() {
    var p = window.location.search.substr(1).split('&');
    p.forEach(function(e, i, a) {
      var keyVal = e.split('=');
      Dz.params[keyVal[0]] = decodeURIComponent(keyVal[1]);
    });
  // Specific params handling
    if (!+this.params.autoplay)
      $$.forEach($$("video"), function(v){ v.controls = true });
  }

  Dz.onkeydown = function(aEvent) {
    // Don't intercept keyboard shortcuts
    if (aEvent.altKey
      || aEvent.ctrlKey
      || aEvent.metaKey
      || aEvent.shiftKey) {
      return;
    }
    if ( aEvent.keyCode == 37 // left arrow
      || aEvent.keyCode == 38 // up arrow
      || aEvent.keyCode == 33 // page up
    ) {
      aEvent.preventDefault();
      this.back();
    }
    if ( aEvent.keyCode == 39 // right arrow
      || aEvent.keyCode == 40 // down arrow
      || aEvent.keyCode == 34 // page down
    ) {
      aEvent.preventDefault();
      this.forward();
    }
    if (aEvent.keyCode == 35) { // end
      aEvent.preventDefault();
      this.goEnd();
    }
    if (aEvent.keyCode == 36) { // home
      aEvent.preventDefault();
      this.goStart();
    }
    if (aEvent.keyCode == 32) { // space
      aEvent.preventDefault();
      this.toggleContent();
    }
    if (aEvent.keyCode == 70) { // f
      aEvent.preventDefault();
      this.goFullscreen();
    }
    if (aEvent.keyCode == 79) { // o
      aEvent.preventDefault();
      this.toggleView();
    }
  }

  /* Touch Events */

  Dz.setupTouchEvents = function() {
    var orgX, newX;
    var tracking = false;

    var db = document.body;
    db.addEventListener("touchstart", start.bind(this), false);
    db.addEventListener("touchmove", move.bind(this), false);

    function start(aEvent) {
      aEvent.preventDefault();
      tracking = true;
      orgX = aEvent.changedTouches[0].pageX;
    }

    function move(aEvent) {
      if (!tracking) return;
      newX = aEvent.changedTouches[0].pageX;
      if (orgX - newX > 100) {
        tracking = false;
        this.forward();
      } else {
        if (orgX - newX < -100) {
          tracking = false;
          this.back();
        }
      }
    }
  }

  Dz.setupView = function() {
    document.body.addEventListener("click", function ( e ) {
      if (!Dz.html.classList.contains("view")) return;
      if (!e.target || e.target.nodeName != "SECTION") return;

      Dz.html.classList.remove("view");
      Dz.setCursor(Dz.slides.indexOf(e.target) + 1);
    }, false);
  }

  /* Adapt the size of the slides to the window */

  Dz.onresize = function() {
    var db = document.body;
    var sx = db.clientWidth / window.innerWidth;
    var sy = db.clientHeight / window.innerHeight;
    var transform = "scale(" + (1/Math.max(sx, sy)) + ")";

    db.style.MozTransform = transform;
    db.style.WebkitTransform = transform;
    db.style.OTransform = transform;
    db.style.msTransform = transform;
    db.style.transform = transform;
  }


  Dz.getNotes = function(aIdx) {
    var s = $("section:nth-of-type(" + aIdx + ")");
    var d = s.$("[role='note']");
    return d ? d.innerHTML : "";
  }

  Dz.onmessage = function(aEvent) {
    var argv = aEvent.data.split(" "), argc = argv.length;
    argv.forEach(function(e, i, a) { a[i] = decodeURIComponent(e) });
    var win = aEvent.source;
    if (argv[0] === "REGISTER" && argc === 1) {
      this.remoteWindows.push(win);
      this.postMsg(win, "REGISTERED", document.title, this.slides.length);
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
      return;
    }
    if (argv[0] === "BACK" && argc === 1)
      this.back();
    if (argv[0] === "FORWARD" && argc === 1)
      this.forward();
    if (argv[0] === "START" && argc === 1)
      this.goStart();
    if (argv[0] === "END" && argc === 1)
      this.goEnd();
    if (argv[0] === "TOGGLE_CONTENT" && argc === 1)
      this.toggleContent();
    if (argv[0] === "SET_CURSOR" && argc === 2)
      window.location.hash = "#" + argv[1];
    if (argv[0] === "GET_CURSOR" && argc === 1)
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
    if (argv[0] === "GET_NOTES" && argc === 1)
      this.postMsg(win, "NOTES", this.getNotes(this.idx));
  }

  Dz.toggleContent = function() {
    // If a Video is present in this new slide, play it.
    // If a Video is present in the previous slide, stop it.
    var s = $("section[aria-selected]");
    if (s) {
      var video = s.$("video");
      if (video) {
        if (video.ended || video.paused) {
          video.play();
        } else {
          video.pause();
        }
      }
    }
  }

  Dz.setCursor = function(aIdx, aStep) {
    // If the user change the slide number in the URL bar, jump
    // to this slide.
    aStep = (aStep != 0 && typeof aStep !== "undefined") ? "." + aStep : ".0";
    window.location.hash = "#" + aIdx + aStep;
  }

  Dz.onhashchange = function() {
    var cursor = window.location.hash.split("#"),
        newidx = 1,
        newstep = 0;
    if (cursor.length == 2) {
      newidx = ~~cursor[1].split(".")[0];
      newstep = ~~cursor[1].split(".")[1];
      if (newstep > Dz.slides[newidx - 1].$$('.incremental > *').length) {
        newstep = 0;
        newidx++;
      }
    }
    this.setProgress(newidx, newstep);
    if (newidx != this.idx) {
      this.setSlide(newidx);
    }
    if (newstep != this.step) {
      this.setIncremental(newstep);
    }
    for (var i = 0; i < this.remoteWindows.length; i++) {
      this.postMsg(this.remoteWindows[i], "CURSOR", this.idx + "." + this.step);
    }
  }

  Dz.back = function() {
    if (this.idx == 1 && this.step == 0) {
      return;
    }
    if (this.step == 0) {
      this.setCursor(this.idx - 1,
                     this.slides[this.idx - 2].$$('.incremental > *').length);
    } else {
      this.setCursor(this.idx, this.step - 1);
    }
  }

  Dz.forward = function() {
    if (this.idx >= this.slides.length &&
        this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
        return;
    }
    if (this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
      this.setCursor(this.idx + 1, 0);
    } else {
      this.setCursor(this.idx, this.step + 1);
    }
  }

  Dz.goStart = function() {
    this.setCursor(1, 0);
  }

  Dz.goEnd = function() {
    var lastIdx = this.slides.length;
    var lastStep = this.slides[lastIdx - 1].$$('.incremental > *').length;
    this.setCursor(lastIdx, lastStep);
  }

  Dz.toggleView = function() {
    this.html.classList.toggle("view");

    if (this.html.classList.contains("view")) {
      $("section[aria-selected]").scrollIntoView(true);
    }
  }

  Dz.setSlide = function(aIdx) {
    this.idx = aIdx;
    var old = $("section[aria-selected]");
    var next = $("section:nth-of-type("+ this.idx +")");
    if (old) {
      old.removeAttribute("aria-selected");
      var video = old.$("video");
      if (video) {
        video.pause();
      }
    }
    if (next) {
      next.setAttribute("aria-selected", "true");
      if (this.html.classList.contains("view")) {
        next.scrollIntoView();
      }
      var video = next.$("video");
      if (video && !!+this.params.autoplay) {
        video.play();
      }
    } else {
      // That should not happen
      this.idx = -1;
      // console.warn("Slide doesn't exist.");
    }
  }

  Dz.setIncremental = function(aStep) {
    this.step = aStep;
    var old = this.slides[this.idx - 1].$('.incremental > *[aria-selected]');
    if (old) {
      old.removeAttribute('aria-selected');
    }
    var incrementals = $$('.incremental');
    if (this.step <= 0) {
      $$.forEach(incrementals, function(aNode) {
        aNode.removeAttribute('active');
      });
      return;
    }
    var next = this.slides[this.idx - 1].$$('.incremental > *')[this.step - 1];
    if (next) {
      next.setAttribute('aria-selected', true);
      next.parentNode.setAttribute('active', true);
      var found = false;
      $$.forEach(incrementals, function(aNode) {
        if (aNode != next.parentNode)
          if (found)
            aNode.removeAttribute('active');
          else
            aNode.setAttribute('active', true);
        else
          found = true;
      });
    } else {
      setCursor(this.idx, 0);
    }
    return next;
  }

  Dz.goFullscreen = function() {
    var html = $('html'),
        requestFullscreen = html.requestFullscreen || html.requestFullScreen || html.mozRequestFullScreen || html.webkitRequestFullScreen;
    if (requestFullscreen) {
      requestFullscreen.apply(html);
    }
  }
  
  Dz.setProgress = function(aIdx, aStep) {
    var slide = $("section:nth-of-type("+ aIdx +")");
    if (!slide)
      return;
    var steps = slide.$$('.incremental > *').length + 1,
        slideSize = 100 / (this.slides.length - 1),
        stepSize = slideSize / steps;
    this.progressBar.style.width = ((aIdx - 1) * slideSize + aStep * stepSize) + '%';
  }
  
  Dz.postMsg = function(aWin, aMsg) { // [arg0, [arg1...]]
    aMsg = [aMsg];
    for (var i = 2; i < arguments.length; i++)
      aMsg.push(encodeURIComponent(arguments[i]));
    aWin.postMessage(aMsg.join(" "), "*");
  }
  
  function init() {
    Dz.init();
    window.onkeydown = Dz.onkeydown.bind(Dz);
    window.onresize = Dz.onresize.bind(Dz);
    window.onhashchange = Dz.onhashchange.bind(Dz);
    window.onmessage = Dz.onmessage.bind(Dz);
  }

  window.onload = init;
</script>


<script> // Helpers
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {

      // closest thing possible to the ECMAScript 5 internal IsCallable
      // function 
      if (typeof this !== "function")
      throw new TypeError(
        "Function.prototype.bind - what is trying to be fBound is not callable"
      );

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
            return fToBind.apply( this instanceof fNOP ? this : oThis || window,
                   aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }

  var $ = (HTMLElement.prototype.$ = function(aQuery) {
    return this.querySelector(aQuery);
  }).bind(document);

  var $$ = (HTMLElement.prototype.$$ = function(aQuery) {
    return this.querySelectorAll(aQuery);
  }).bind(document);

  $$.forEach = function(nodeList, fun) {
    Array.prototype.forEach.call(nodeList, fun);
  }

</script>
<!-- vim: set fdm=marker: }}} -->
</body>
</html>
